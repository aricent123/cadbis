<?php
require_once(dirname(__FILE__)."/common.inc.php");

// C# code:
//var ary = { 1, 2, 3 };
// var x = 2;
// ary.Select(elem => elem * x;);

// PHP code:
$arr = arr(1,2,3);
$x = 2;
$arr->select(eval(${new closure('$el')}->{'$el*=$x'}));


$a = 10;
eval(${new closure()}->invoke('echo $a+10;'));

closure(eval(${new closure()}->{'
	$a*=10;
'}));

/**
 PHP Closure
Когда со мной начали спорить что PHP - вообще никакой язык, я молчать не смог. 
Утверждалось, что в PHP вообще нет никаких преимуществ перед великим и могучим C#. 
Ну как тут было не поспорить? Лично я считаю, что PHP в любом случае более гибкий язык (в силу
того что он интерпретируем) и всё что можно реализовать на C# - можно несложно реализовать и 
на PHP, а вот обратное во множестве случаев практически невозможно! 
Мне говорили "но ведь PHP - не объектно-ориентированный язык! в C# - есть полноценная 
объектная модель, наследование, интерфейсы, абстрактные классы, виртуальные методы, свойства, и 
большая коллекция паттернов!", "Позвольте, позвольте, но ведь всё это так же есть и в PHP!" - 
отвечал я. В PHP5 есть нормальная объектная модель со всеми этими необходимыми фичами. 
"А есть там делегаты?" - спросили меня. "Они там попросту не нужны" - отвечал я. - 
"Язык скриптовый, динамический и нестрого типизированный, поэтому нечего говорить про
generics, delegates и прочие приблуды - зачем они здесь? Я больше чем уверен, что если мне 
потребуется делегат, я смогу его реализовать на PHP в 2 счёта!". 
Вообще, я быстро устаю от подобных нападок. Они, как правило, абсолютно беспочвенны. Ну почему
мало кто воспринимает скриптовые языки всерьёз? Один лишь Ruby как-то выделяется на фоне 
остальных. Sun даже собирается включить его в следующую версию JDK. А PHP, мол, какашка - 
вчерашний день... Ну что за бред, извините меня?  
У Ruby очень грамотная реклама и хороший подход к обучению - "как писать правильно". И пожалуйста - 
Ruby On Rails лучший фреймворк в Интернете. Может быть, так оно и есть, я спорить не буду. Мне
нравится идеология Rails, но то что Ruby - намного продвинутее PHP как язык. я сказать не могу. 
Думаю, что они скорее сравнимы. Просто почему-то никто не учится писать на PHP правильно. 
Почему-то люди чаще начинают на нём писать плохо, копируют дурацкие примеры, не обращают внимания на 
абстракцию и декомпозицию... В итоге - в Интернете очень много плохого PHP кода. 
На PHP гораздо больше фреймворков чем на Ruby, но далеко не все они сравнимы с ROR по удобству. 
Думаю, что по той же причине, которую я обозначил выше. PHP, видимо, располагает к тому чтобы писать
на нём плохо. Он расслабляет? Позволяет не обращать внимания на мелочи? Я в замешательстве.
Что же до сравнения PHP и C# давайте пройдём по наиболее существенным различиям, сравнивая лишь сам 
язык. Я ни в коей мере не собираюсь сравнивать скажем .NET и PHP - только язык. Итак:
- ООП? Что сказать - необходимый минимум в PHP есть. Интерфейсы, абстрактные классы, наследование, 
паттерны - это всё легко реализуемо. Ну да, нет в нём парциальных классов. Но, по-моему, это совершенно
несущественно. Вот то что нет пространств имён - уже минус, здесь спорить не буду. Хотя, при грамотном
подходе можно обойтись и без них. В конце концов их можно реализовать самостоятельно (есть прекрасные
примеры - ZendFramework, PRADO... etc).
- Строгая типизация? Такой же плюс как и минус, объяснять, надеюсь, смысла нет.
- Generics? В PHP от них никакого толку поскольку язык нестрого типизированный. 
- Delegates? - Ну не нужны они здесь! в крайнем случае я вызываю create_function(). Это похоже на создание
анонимного делегата в C#. Например, сортировка массива: 

// PHP 5.x code:
usort($arr, create_function('$a,$b','return ($a==$b)?0:($a<$b)? 1 : -1;'));

- Closures? - Вот это уже интересно. В PHP их нет. Думаю, что это довольно существенный недостаток. Однако, 
нет ничего невозможного. Можно реализовать и такую приблуду, если захотеть. Один из вариантов реализации - 
в SMPHPToolkit. Для сравнения:

// C# 3.0 code:
var ary = { 1, 2, 3 };
var x = 2;
ary.Select(elem => elem * x;);

// PHP 5.x code:
$arr = arr( 1, 2, 3 );
$x = 2;
$arr->select(eval(${new closure('$el')}->{'$el*=$x'}));

В принципе получилось не сильно больше кода. А по сути - почти то же самое. Думаю, это одна из 
лучших эмуляций closure на PHP. Очень надеюсь что полноценные замыкания войдут в 6-ю версию.



*/